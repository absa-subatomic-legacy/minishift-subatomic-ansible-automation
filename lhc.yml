---
# Title: Ansible Local Hadron Collider Setup  (MAC ONLY)
# Description: Install/Re-install minishift and get Subatomic components configured  (MAC ONLY)
# Note 1: Please ensure either xhyve or virtualbox are already installed as your hypervisor see https://docs.okd.io/latest/minishift/getting-started/setting-up-virtualization-environment.html
# Note 2: This script will uninstall minishift if installed and will delete local-hadron and re-clone it (ie not idempotent)
# Note 3: Please update the vars below to suit your installation

- hosts: localhost

  vars:
    # paths
    path_to_your_quantum_mechanic: '/Users/xxx/Projects/Subatomic/open/quantum-mechanic'
    path_to_your_local_hadron_collider: '/Users/xxx/Projects/Subatomic/open/local-hadron-collider'
    path_to_minishift_start_output_log: '/Users/xxx/Projects/Subatomic'
    path_to_applier_output_log: '/Users/xxx/Projects/Subatomic'

    # options are virtualbox or xhyve
    vm_driver: 'virtualbox'

    # resources to allocate (may require trial and error)
    cpus: "4"
    memory_MB: "7000"
    disk_size_GB: "25"

    # as per local hadron collider requirements
    ansible_version_to_be_greater_than: "2.5.0"

    # time in seconds to wait for minishift to download iso's and start (2400 = 40 minutes)
    minishift_startup_timeout_secs: 2400

  tasks:
     1. Ansible version check
    - name: Check Ansible version is > {{ansible_version.string}}
      command: ansible --version
      register: ansible_version

    - name: Print ansible_version variable
      debug: var=ansible_version

    - name: Ansible full version check
      fail:
        msg: " Ansible version {{ansible_version_to_be_greater_than}} is required, you have {{ansible_version.string}} installed"
      when: ( ansible_version.string|replace(".","") |int) <= ( ansible_version_to_be_greater_than|replace(".","") |int)

    # 2. Dnsmasq check
    - name: Check if dnsmasq installed
      command: brew services list
      register: brew_services

    - name: Print brew_services variable
      debug: var=brew_services

    - name: Install dnsmasq if not installed
      command: brew install dnsmasq
      when: brew_services.stdout.find("dnsmasq") == -1

    # 3.1 Minishift installed?
    - name: Get minishift version
      command: 'minishift version'
      register: minishift_version
      ignore_errors: yes

    - name: Print minishift_version variable
      debug: var=minishift_version

    - name: Yes minishift found
      command: echo "Found minishift :)"
      register: found_mini
      when: minishift_version.failed == false
      ignore_errors: yes

    - name: No minishift NOT found
      command: echo " minishift missing, ie do not run uninstall"
      register: found_mini
      when: minishift_version.failed == true
      ignore_errors: yes

    - name: Print found_mini variable
      debug: var=found_mini.stdout

    # 3.2 Remove minishift if installed
    - name: Uninstall minishift (if installed)
      command: "{{item}}"
      with_items:
        - minishift stop
        - minishift delete
        - rm -rf ~/.minishift
        - rm -rf ~/.kube
        - brew cask remove minishift
      when: minishift_version.failed == false
      ignore_errors: yes

    # 4. Install minishift
    - name: Install minishift
      command: brew cask install minishift

    - name: Set VM driver
      command: minishift config set vm-driver {{vm_driver}}

    # 5. Local hadron clean and clone
    - name: Delete local hadron collider folder (with contents) if it exists
      command: rm -rf '{{path_to_your_local_hadron_collider}}'

#    - name: Create local hadron collider folder
#      file:
#        state: directory
#        path: '{{path_to_your_local_hadron_collider}}'
#        mode: 0777

    - name: Git clone local-hadron-collider
      git:
        repo: 'https://github.com/absa-subatomic/local-hadron-collider.git'
        dest: '{{path_to_your_local_hadron_collider}}'
        clone: True
        update: False

    # 6. Run `minishift addons
    - name: Enable minishift addons
      shell: "{{item}}"
      with_items:
      - minishift profile set subatomic-local
      - minishift addons enable admin-user --profile subatomic-local
      - minishift addons install minishift-addons/subatomic --profile subatomic-local
      - minishift addons enable subatomic --profile subatomic-local
      args:
        chdir: '{{path_to_your_local_hadron_collider}}'
      failed_when: False

    # 7. Minishift start with params
    - name: delete minishift start log
      command: rm -rf {{path_to_minishift_start_output_log}}/minishift_start.log

    - name: Start minishift
      shell: "{{item}}"
      with_items:
      - minishift start --profile subatomic-local --cpus {{cpus}} --memory {{memory_MB}}MB --disk-size {{disk_size_GB}}GB --routing-suffix subatomic.local --vm-driver {{vm_driver}} >> {{path_to_minishift_start_output_log}}/minishift_start.log
      failed_when: False
      register: minishift_start
      async: '{{minishift_startup_timeout_secs}}'
      poll: 0

    - name: Wait for minishift to download and first time start
      wait_for:
        path: '{{path_to_minishift_start_output_log}}/minishift_start.log'
        search_regex: "{{item}}"
        timeout: '{{minishift_startup_timeout_secs}}'
      with_items:
        - -- Starting profile 'subatomic-local'
        - -- Check if deprecated options are used
        - -- Checking if https://github.com is reachable
        - -- Checking if requested OpenShift version
        - -- Checking if requested hypervisor
        - -- Checking the ISO URL
        - -- Downloading OpenShift binary 'oc' version
        - -- Checking if provided oc flags are supported
        - -- Starting the OpenShift cluster using
        - -- Minishift VM will be configured with
        - Downloading ISO
        - -- Starting Minishift VM
        - -- Checking for IP address
        - -- Checking for nameservers
        - -- Checking if external host is reachable
        - -- Checking HTTP connectivity from the VM
        - -- Checking if persistent storage volume is mounted
        - -- Checking available disk space
        - -- Writing current configuration for static assignment of IP address
        - -- OpenShift cluster will be configured with
        - -- Pulling the OpenShift Container Image
        - -- Copying oc binary from the OpenShift container image to VM
        - -- Starting OpenShift cluster
        - Getting a Docker client
        - Checking type of volume mount
        - Determining server IP
        - Checking if OpenShift is already running
        - Checking for supported Docker version
        - Checking if insecured registry is configured properly in Docker
        - Checking if required ports are available
        - Checking if OpenShift client is configured properly
        - Checking if image openshift/origin-control-plane
        - Starting OpenShift using
        - Adding default OAuthClient redirect URIs
        - Adding registry
        - Adding persistent-volumes
        - Adding web-console
        - Adding centos-imagestreams
        - Adding router
        - Adding sample-templates
        - Login to server
        - Creating initial project "myproject"
        - Server Information
        - OpenShift server started
        - The server is accessible via web console at
        - -- Applying addon 'subatomic'
        - -- Applying addon 'admin-user'
        - -- Exporting of OpenShift images is occuring in background process with pid

    # 8. Re-apply addons if failed
    - name: Apply minishift addons
      shell: "{{item}}"
      with_items:
        - minishift addons apply subatomic
      args:
        chdir: '{{path_to_your_local_hadron_collider}}'
      failed_when: False

    # 9. Restart minishift
    - name: Minishift restart
      command: minishift openshift restart
      register: minishift_openshift_restart

    - debug: var=minishift_openshift_restart

    - pause:
        minutes: 1
        prompt: "Waiting minishift to start completely"

# EVEYTHING BELOW THIS LINE IS STILL WIP
#    # 10. Update dnsmasq with minishift ip + do curl check
#    - name: Get minishift ip
#      command: minishift ip
#      register: minishift_ip
#      changed_when: False
#
#    - name: Print minishift ip
#      debug: var=minishift_ip.stdout
#
#    - name: Update dnsmasq with minishift ip
#      command: sed -i -e 's/.*address=\/subatomic.local\/.*/address=\/subatomic.local\/{{minishift_ip.stdout}}/' /usr/local/etc/dnsmasq.conf
#      args:
#        warn: False
#
#    - name: Restart dnsmasq
#      command: brew services restart dnsmasq
#
#    - name: 503 curl check
#      command: curl -I nothing.subatomic.local
#      register: curl_check
#      ignore_errors: yes
#
#    - name: Print curl_check variable
#      debug: var=curl_check
#
#    # 11. Install Subatomic infra-components
#      #TODO: to still test eval
#    - name: eval oc-env
#      shell: eval $(minishift oc-env)
#      failed_when: False
#
#    - name: Log in to OpenShift as admin
#      command: oc login https://{{minishift_ip.stdout}}:8443 -u=admin -p=admin
#      failed_when: False
#
#    - name: Get OpenShift token
#      command: oc whoami -t
#      register: oc_token
#
#    - debug: var=oc_token
#
#    - name: Log in to OpenShift using token
#      command: oc login https://{{minishift_ip.stdout}}:8443 --token={{oc_token.stdout}}
#
#    - name: Print oc token
#      debug: var=oc_token.stdout
#
#    - name: Replace token in QM local.json
#      replace:
#        path: '{{path_to_your_quantum_mechanic}}/config/local.json'
#        regexp: 'token": ".*'
#        replace: 'token": "{{oc_token.stdout}}"'
#
#    - name: Replace masterUrl in QM local.json
#      replace:
#        path: '{{path_to_your_quantum_mechanic}}/config/local.json'
#        regexp: 'masterUrl": "https:\/\/.*'
#        replace: 'masterUrl": "https://{{minishift_ip.stdout}}:8443",'
#
#    - name: Install Applier dependecy via Ansible Galaxy
#      command: ansible-galaxy install --role-file requirements.yml --roles-path=roles
#      args:
#        chdir: '{{path_to_your_local_hadron_collider}}'
#      failed_when: False

#      Breaks run this step manually!!!
#    - name: Set fork safety ENV variable
#      shell: "echo $OBJC_DISABLE_INITIALIZE_FORK_SAFETY"
#      environment:
#        OBJC_DISABLE_INITIALIZE_FORK_SAFETY: YES

#      Breaks run this step manually!!!
#    - name: Run OpenShift Applier
#      shell: "{{item}}"
#      with_items:
#      - ansible-playbook -i inventory/hosts roles/openshift-applier/playbooks/openshift-cluster-seed.yml >> {{path_to_applier_output_log}}/minishift_applier.log
#      args:
#        chdir: '{{path_to_your_local_hadron_collider}}'
#      failed_when: False

  #  - pause:
  #      minutes: 15
  #      prompt: "Waiting for environment to setup"

  #  - name: Start Gluon
  #    command: chdir=../gluon ./mvnw spring-boot:run -pl nucleus -Dspring.profiles.active=local
  #    async: 120
  #    poll: 0
  #
  #  - name: Start Quantum Mechanic
  #    command: chdir=../quantum-mechanic npm run compile start
  #    async: 120
  #    poll: 0
  #
  #  - pause:
  #      minutes: 1
  #      prompt: "Waiting for Gluon and QM to start up"
  #
  #  - name: Create virtual env
  #    command: chdir=../subatomic-integration-testing/ sh run_integration_tests.sh
